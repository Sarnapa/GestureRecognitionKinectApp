// This file was auto-generated by ML.NET Model Builder.
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.ML;
using Microsoft.ML.Data;

namespace GestureRecognition.Processing.GestureRecognitionProcUnit.Models.TGM1
{
	public class TGM1
	{
		/// <summary>
		/// model input class for ThreeGestureModel_ValidationSet_IgnoreLeftArm_IgnoreBetweenHandJointsDistance.
		/// </summary>
		#region model input class
		public class ModelInput
		{
			[LoadColumn(8)]
			[ColumnName(@"ElbowRightF1F2SpatialAngle")]
			public float ElbowRightF1F2SpatialAngle
			{
				get; set;
			}

			[LoadColumn(9)]
			[ColumnName(@"ElbowRightFN_1FNSpatialAngle")]
			public float ElbowRightFN_1FNSpatialAngle
			{
				get; set;
			}

			[LoadColumn(10)]
			[ColumnName(@"ElbowRightF1FNSpatialAngle")]
			public float ElbowRightF1FNSpatialAngle
			{
				get; set;
			}

			[LoadColumn(11)]
			[ColumnName(@"ElbowRightTotalVectorAngle")]
			public float ElbowRightTotalVectorAngle
			{
				get; set;
			}

			[LoadColumn(12)]
			[ColumnName(@"ElbowRightSquaredTotalVectorAngle")]
			public float ElbowRightSquaredTotalVectorAngle
			{
				get; set;
			}

			[LoadColumn(13)]
			[ColumnName(@"ElbowRightTotalVectorDisplacement")]
			public float ElbowRightTotalVectorDisplacement
			{
				get; set;
			}

			[LoadColumn(14)]
			[ColumnName(@"ElbowRightTotalDisplacement")]
			public float ElbowRightTotalDisplacement
			{
				get; set;
			}

			[LoadColumn(15)]
			[ColumnName(@"ElbowRightMaximumDisplacement")]
			public float ElbowRightMaximumDisplacement
			{
				get; set;
			}

			[LoadColumn(24)]
			[ColumnName(@"WristRightF1F2SpatialAngle")]
			public float WristRightF1F2SpatialAngle
			{
				get; set;
			}

			[LoadColumn(25)]
			[ColumnName(@"WristRightFN_1FNSpatialAngle")]
			public float WristRightFN_1FNSpatialAngle
			{
				get; set;
			}

			[LoadColumn(26)]
			[ColumnName(@"WristRightF1FNSpatialAngle")]
			public float WristRightF1FNSpatialAngle
			{
				get; set;
			}

			[LoadColumn(27)]
			[ColumnName(@"WristRightTotalVectorAngle")]
			public float WristRightTotalVectorAngle
			{
				get; set;
			}

			[LoadColumn(28)]
			[ColumnName(@"WristRightSquaredTotalVectorAngle")]
			public float WristRightSquaredTotalVectorAngle
			{
				get; set;
			}

			[LoadColumn(29)]
			[ColumnName(@"WristRightTotalVectorDisplacement")]
			public float WristRightTotalVectorDisplacement
			{
				get; set;
			}

			[LoadColumn(30)]
			[ColumnName(@"WristRightTotalDisplacement")]
			public float WristRightTotalDisplacement
			{
				get; set;
			}

			[LoadColumn(31)]
			[ColumnName(@"WristRightMaximumDisplacement")]
			public float WristRightMaximumDisplacement
			{
				get; set;
			}

			[LoadColumn(42)]
			[ColumnName(@"HandRightF1F2SpatialAngle")]
			public float HandRightF1F2SpatialAngle
			{
				get; set;
			}

			[LoadColumn(43)]
			[ColumnName(@"HandRightFN_1FNSpatialAngle")]
			public float HandRightFN_1FNSpatialAngle
			{
				get; set;
			}

			[LoadColumn(44)]
			[ColumnName(@"HandRightF1FNSpatialAngle")]
			public float HandRightF1FNSpatialAngle
			{
				get; set;
			}

			[LoadColumn(45)]
			[ColumnName(@"HandRightTotalVectorAngle")]
			public float HandRightTotalVectorAngle
			{
				get; set;
			}

			[LoadColumn(46)]
			[ColumnName(@"HandRightSquaredTotalVectorAngle")]
			public float HandRightSquaredTotalVectorAngle
			{
				get; set;
			}

			[LoadColumn(47)]
			[ColumnName(@"HandRightTotalVectorDisplacement")]
			public float HandRightTotalVectorDisplacement
			{
				get; set;
			}

			[LoadColumn(48)]
			[ColumnName(@"HandRightTotalDisplacement")]
			public float HandRightTotalDisplacement
			{
				get; set;
			}

			[LoadColumn(49)]
			[ColumnName(@"HandRightMaximumDisplacement")]
			public float HandRightMaximumDisplacement
			{
				get; set;
			}

			[LoadColumn(50)]
			[ColumnName(@"HandRightBoundingBoxDiagonalLength")]
			public float HandRightBoundingBoxDiagonalLength
			{
				get; set;
			}

			[LoadColumn(51)]
			[ColumnName(@"HandRightBoundingBoxAngle")]
			public float HandRightBoundingBoxAngle
			{
				get; set;
			}

			[LoadColumn(60)]
			[ColumnName(@"ThumbRightF1F2SpatialAngle")]
			public float ThumbRightF1F2SpatialAngle
			{
				get; set;
			}

			[LoadColumn(61)]
			[ColumnName(@"ThumbRightFN_1FNSpatialAngle")]
			public float ThumbRightFN_1FNSpatialAngle
			{
				get; set;
			}

			[LoadColumn(62)]
			[ColumnName(@"ThumbRightF1FNSpatialAngle")]
			public float ThumbRightF1FNSpatialAngle
			{
				get; set;
			}

			[LoadColumn(63)]
			[ColumnName(@"ThumbRightTotalVectorAngle")]
			public float ThumbRightTotalVectorAngle
			{
				get; set;
			}

			[LoadColumn(64)]
			[ColumnName(@"ThumbRightSquaredTotalVectorAngle")]
			public float ThumbRightSquaredTotalVectorAngle
			{
				get; set;
			}

			[LoadColumn(65)]
			[ColumnName(@"ThumbRightTotalVectorDisplacement")]
			public float ThumbRightTotalVectorDisplacement
			{
				get; set;
			}

			[LoadColumn(66)]
			[ColumnName(@"ThumbRightTotalDisplacement")]
			public float ThumbRightTotalDisplacement
			{
				get; set;
			}

			[LoadColumn(67)]
			[ColumnName(@"ThumbRightMaximumDisplacement")]
			public float ThumbRightMaximumDisplacement
			{
				get; set;
			}

			[LoadColumn(76)]
			[ColumnName(@"HandTipRightF1F2SpatialAngle")]
			public float HandTipRightF1F2SpatialAngle
			{
				get; set;
			}

			[LoadColumn(77)]
			[ColumnName(@"HandTipRightFN_1FNSpatialAngle")]
			public float HandTipRightFN_1FNSpatialAngle
			{
				get; set;
			}

			[LoadColumn(78)]
			[ColumnName(@"HandTipRightF1FNSpatialAngle")]
			public float HandTipRightF1FNSpatialAngle
			{
				get; set;
			}

			[LoadColumn(79)]
			[ColumnName(@"HandTipRightTotalVectorAngle")]
			public float HandTipRightTotalVectorAngle
			{
				get; set;
			}

			[LoadColumn(80)]
			[ColumnName(@"HandTipRightSquaredTotalVectorAngle")]
			public float HandTipRightSquaredTotalVectorAngle
			{
				get; set;
			}

			[LoadColumn(81)]
			[ColumnName(@"HandTipRightTotalVectorDisplacement")]
			public float HandTipRightTotalVectorDisplacement
			{
				get; set;
			}

			[LoadColumn(82)]
			[ColumnName(@"HandTipRightTotalDisplacement")]
			public float HandTipRightTotalDisplacement
			{
				get; set;
			}

			[LoadColumn(83)]
			[ColumnName(@"HandTipRightMaximumDisplacement")]
			public float HandTipRightMaximumDisplacement
			{
				get; set;
			}

			[LoadColumn(88)]
			[ColumnName(@"ElbowRightWristRightBoneInitialAngle")]
			public float ElbowRightWristRightBoneInitialAngle
			{
				get; set;
			}

			[LoadColumn(89)]
			[ColumnName(@"ElbowRightWristRightBoneFinalAngle")]
			public float ElbowRightWristRightBoneFinalAngle
			{
				get; set;
			}

			[LoadColumn(90)]
			[ColumnName(@"ElbowRightWristRightBoneMeanAngle")]
			public float ElbowRightWristRightBoneMeanAngle
			{
				get; set;
			}

			[LoadColumn(91)]
			[ColumnName(@"ElbowRightWristRightBoneMaximumAngle")]
			public float ElbowRightWristRightBoneMaximumAngle
			{
				get; set;
			}

			[LoadColumn(96)]
			[ColumnName(@"WristRightHandRightBoneInitialAngle")]
			public float WristRightHandRightBoneInitialAngle
			{
				get; set;
			}

			[LoadColumn(97)]
			[ColumnName(@"WristRightHandRightBoneFinalAngle")]
			public float WristRightHandRightBoneFinalAngle
			{
				get; set;
			}

			[LoadColumn(98)]
			[ColumnName(@"WristRightHandRightBoneMeanAngle")]
			public float WristRightHandRightBoneMeanAngle
			{
				get; set;
			}

			[LoadColumn(99)]
			[ColumnName(@"WristRightHandRightBoneMaximumAngle")]
			public float WristRightHandRightBoneMaximumAngle
			{
				get; set;
			}

			[LoadColumn(104)]
			[ColumnName(@"HandRightHandTipRightBoneInitialAngle")]
			public float HandRightHandTipRightBoneInitialAngle
			{
				get; set;
			}

			[LoadColumn(105)]
			[ColumnName(@"HandRightHandTipRightBoneFinalAngle")]
			public float HandRightHandTipRightBoneFinalAngle
			{
				get; set;
			}

			[LoadColumn(106)]
			[ColumnName(@"HandRightHandTipRightBoneMeanAngle")]
			public float HandRightHandTipRightBoneMeanAngle
			{
				get; set;
			}

			[LoadColumn(107)]
			[ColumnName(@"HandRightHandTipRightBoneMaximumAngle")]
			public float HandRightHandTipRightBoneMaximumAngle
			{
				get; set;
			}

			[LoadColumn(110)]
			[ColumnName(@"Label")]
			public string Label
			{
				get; set;
			}

		}

		#endregion

		/// <summary>
		/// model output class for ThreeGestureModel_ValidationSet_IgnoreLeftArm_IgnoreBetweenHandJointsDistance.
		/// </summary>
		#region model output class
		public class ModelOutput
		{
			[ColumnName(@"ElbowRightF1F2SpatialAngle")]
			public float ElbowRightF1F2SpatialAngle
			{
				get; set;
			}

			[ColumnName(@"ElbowRightFN_1FNSpatialAngle")]
			public float ElbowRightFN_1FNSpatialAngle
			{
				get; set;
			}

			[ColumnName(@"ElbowRightF1FNSpatialAngle")]
			public float ElbowRightF1FNSpatialAngle
			{
				get; set;
			}

			[ColumnName(@"ElbowRightTotalVectorAngle")]
			public float ElbowRightTotalVectorAngle
			{
				get; set;
			}

			[ColumnName(@"ElbowRightSquaredTotalVectorAngle")]
			public float ElbowRightSquaredTotalVectorAngle
			{
				get; set;
			}

			[ColumnName(@"ElbowRightTotalVectorDisplacement")]
			public float ElbowRightTotalVectorDisplacement
			{
				get; set;
			}

			[ColumnName(@"ElbowRightTotalDisplacement")]
			public float ElbowRightTotalDisplacement
			{
				get; set;
			}

			[ColumnName(@"ElbowRightMaximumDisplacement")]
			public float ElbowRightMaximumDisplacement
			{
				get; set;
			}

			[ColumnName(@"WristRightF1F2SpatialAngle")]
			public float WristRightF1F2SpatialAngle
			{
				get; set;
			}

			[ColumnName(@"WristRightFN_1FNSpatialAngle")]
			public float WristRightFN_1FNSpatialAngle
			{
				get; set;
			}

			[ColumnName(@"WristRightF1FNSpatialAngle")]
			public float WristRightF1FNSpatialAngle
			{
				get; set;
			}

			[ColumnName(@"WristRightTotalVectorAngle")]
			public float WristRightTotalVectorAngle
			{
				get; set;
			}

			[ColumnName(@"WristRightSquaredTotalVectorAngle")]
			public float WristRightSquaredTotalVectorAngle
			{
				get; set;
			}

			[ColumnName(@"WristRightTotalVectorDisplacement")]
			public float WristRightTotalVectorDisplacement
			{
				get; set;
			}

			[ColumnName(@"WristRightTotalDisplacement")]
			public float WristRightTotalDisplacement
			{
				get; set;
			}

			[ColumnName(@"WristRightMaximumDisplacement")]
			public float WristRightMaximumDisplacement
			{
				get; set;
			}

			[ColumnName(@"HandRightF1F2SpatialAngle")]
			public float HandRightF1F2SpatialAngle
			{
				get; set;
			}

			[ColumnName(@"HandRightFN_1FNSpatialAngle")]
			public float HandRightFN_1FNSpatialAngle
			{
				get; set;
			}

			[ColumnName(@"HandRightF1FNSpatialAngle")]
			public float HandRightF1FNSpatialAngle
			{
				get; set;
			}

			[ColumnName(@"HandRightTotalVectorAngle")]
			public float HandRightTotalVectorAngle
			{
				get; set;
			}

			[ColumnName(@"HandRightSquaredTotalVectorAngle")]
			public float HandRightSquaredTotalVectorAngle
			{
				get; set;
			}

			[ColumnName(@"HandRightTotalVectorDisplacement")]
			public float HandRightTotalVectorDisplacement
			{
				get; set;
			}

			[ColumnName(@"HandRightTotalDisplacement")]
			public float HandRightTotalDisplacement
			{
				get; set;
			}

			[ColumnName(@"HandRightMaximumDisplacement")]
			public float HandRightMaximumDisplacement
			{
				get; set;
			}

			[ColumnName(@"HandRightBoundingBoxDiagonalLength")]
			public float HandRightBoundingBoxDiagonalLength
			{
				get; set;
			}

			[ColumnName(@"HandRightBoundingBoxAngle")]
			public float HandRightBoundingBoxAngle
			{
				get; set;
			}

			[ColumnName(@"ThumbRightF1F2SpatialAngle")]
			public float ThumbRightF1F2SpatialAngle
			{
				get; set;
			}

			[ColumnName(@"ThumbRightFN_1FNSpatialAngle")]
			public float ThumbRightFN_1FNSpatialAngle
			{
				get; set;
			}

			[ColumnName(@"ThumbRightF1FNSpatialAngle")]
			public float ThumbRightF1FNSpatialAngle
			{
				get; set;
			}

			[ColumnName(@"ThumbRightTotalVectorAngle")]
			public float ThumbRightTotalVectorAngle
			{
				get; set;
			}

			[ColumnName(@"ThumbRightSquaredTotalVectorAngle")]
			public float ThumbRightSquaredTotalVectorAngle
			{
				get; set;
			}

			[ColumnName(@"ThumbRightTotalVectorDisplacement")]
			public float ThumbRightTotalVectorDisplacement
			{
				get; set;
			}

			[ColumnName(@"ThumbRightTotalDisplacement")]
			public float ThumbRightTotalDisplacement
			{
				get; set;
			}

			[ColumnName(@"ThumbRightMaximumDisplacement")]
			public float ThumbRightMaximumDisplacement
			{
				get; set;
			}

			[ColumnName(@"HandTipRightF1F2SpatialAngle")]
			public float HandTipRightF1F2SpatialAngle
			{
				get; set;
			}

			[ColumnName(@"HandTipRightFN_1FNSpatialAngle")]
			public float HandTipRightFN_1FNSpatialAngle
			{
				get; set;
			}

			[ColumnName(@"HandTipRightF1FNSpatialAngle")]
			public float HandTipRightF1FNSpatialAngle
			{
				get; set;
			}

			[ColumnName(@"HandTipRightTotalVectorAngle")]
			public float HandTipRightTotalVectorAngle
			{
				get; set;
			}

			[ColumnName(@"HandTipRightSquaredTotalVectorAngle")]
			public float HandTipRightSquaredTotalVectorAngle
			{
				get; set;
			}

			[ColumnName(@"HandTipRightTotalVectorDisplacement")]
			public float HandTipRightTotalVectorDisplacement
			{
				get; set;
			}

			[ColumnName(@"HandTipRightTotalDisplacement")]
			public float HandTipRightTotalDisplacement
			{
				get; set;
			}

			[ColumnName(@"HandTipRightMaximumDisplacement")]
			public float HandTipRightMaximumDisplacement
			{
				get; set;
			}

			[ColumnName(@"ElbowRightWristRightBoneInitialAngle")]
			public float ElbowRightWristRightBoneInitialAngle
			{
				get; set;
			}

			[ColumnName(@"ElbowRightWristRightBoneFinalAngle")]
			public float ElbowRightWristRightBoneFinalAngle
			{
				get; set;
			}

			[ColumnName(@"ElbowRightWristRightBoneMeanAngle")]
			public float ElbowRightWristRightBoneMeanAngle
			{
				get; set;
			}

			[ColumnName(@"ElbowRightWristRightBoneMaximumAngle")]
			public float ElbowRightWristRightBoneMaximumAngle
			{
				get; set;
			}

			[ColumnName(@"WristRightHandRightBoneInitialAngle")]
			public float WristRightHandRightBoneInitialAngle
			{
				get; set;
			}

			[ColumnName(@"WristRightHandRightBoneFinalAngle")]
			public float WristRightHandRightBoneFinalAngle
			{
				get; set;
			}

			[ColumnName(@"WristRightHandRightBoneMeanAngle")]
			public float WristRightHandRightBoneMeanAngle
			{
				get; set;
			}

			[ColumnName(@"WristRightHandRightBoneMaximumAngle")]
			public float WristRightHandRightBoneMaximumAngle
			{
				get; set;
			}

			[ColumnName(@"HandRightHandTipRightBoneInitialAngle")]
			public float HandRightHandTipRightBoneInitialAngle
			{
				get; set;
			}

			[ColumnName(@"HandRightHandTipRightBoneFinalAngle")]
			public float HandRightHandTipRightBoneFinalAngle
			{
				get; set;
			}

			[ColumnName(@"HandRightHandTipRightBoneMeanAngle")]
			public float HandRightHandTipRightBoneMeanAngle
			{
				get; set;
			}

			[ColumnName(@"HandRightHandTipRightBoneMaximumAngle")]
			public float HandRightHandTipRightBoneMaximumAngle
			{
				get; set;
			}

			[ColumnName(@"Label")]
			public uint Label
			{
				get; set;
			}

			[ColumnName(@"Features")]
			public float[] Features
			{
				get; set;
			}

			[ColumnName(@"PredictedLabel")]
			public string PredictedLabel
			{
				get; set;
			}

			[ColumnName(@"Score")]
			public float[] Score
			{
				get; set;
			}

		}
		#endregion

		private static string MLNetModelPath = @"C:\Users\Michal\OneDrive\Studies\Praca_MGR\Project\Models\2025_02_03_ThreeGesturesModel\Model\TGM1\ThreeGestureModel_ValidationSet_IgnoreLeftArm_IgnoreBetweenHandJointsDistance.mlnet";

		public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

		private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
		{
			var mlContext = new MLContext();
			ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
			return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
		}

		/// <summary>
		/// Use this method to predict scores for all possible labels.
		/// </summary>
		/// <param name="input">model input.</param>
		/// <returns><seealso cref=" ModelOutput"/></returns>
		public static IOrderedEnumerable<KeyValuePair<string, float>> PredictAllLabels(ModelInput input)
		{
			var predEngine = PredictEngine.Value;
			var result = predEngine.Predict(input);
			return GetSortedScoresWithLabels(result);
		}

		/// <summary>
		/// Map the unlabeled result score array to the predicted label names.
		/// </summary>
		/// <param name="result">Prediction to get the labeled scores from.</param>
		/// <returns>Ordered list of label and score.</returns>
		/// <exception cref="Exception"></exception>
		public static IOrderedEnumerable<KeyValuePair<string, float>> GetSortedScoresWithLabels(ModelOutput result)
		{
			var unlabeledScores = result.Score;
			var labelNames = GetLabels(result);

			Dictionary<string, float> labledScores = new Dictionary<string, float>();
			for (int i = 0; i < labelNames.Count(); i++)
			{
				// Map the names to the predicted result score array
				var labelName = labelNames.ElementAt(i);
				labledScores.Add(labelName.ToString(), unlabeledScores[i]);
			}

			return labledScores.OrderByDescending(c => c.Value);
		}

		/// <summary>
		/// Get the ordered label names.
		/// </summary>
		/// <param name="result">Predicted result to get the labels from.</param>
		/// <returns>List of labels.</returns>
		/// <exception cref="Exception"></exception>
		private static IEnumerable<string> GetLabels(ModelOutput result)
		{
			var schema = PredictEngine.Value.OutputSchema;

			var labelColumn = schema.GetColumnOrNull("Label");
			if (labelColumn == null)
			{
				throw new Exception("Label column not found. Make sure the name searched for matches the name in the schema.");
			}

			// Key values contains an ordered array of the possible labels. This allows us to map the results to the correct label value.
			var keyNames = new VBuffer<ReadOnlyMemory<char>>();
			labelColumn.Value.GetKeyValues(ref keyNames);
			return keyNames.DenseValues().Select(x => x.ToString());
		}

		/// <summary>
		/// Use this method to predict on <see cref="ModelInput"/>.
		/// </summary>
		/// <param name="input">model input.</param>
		/// <returns><seealso cref=" ModelOutput"/></returns>
		public static ModelOutput Predict(ModelInput input)
		{
			var predEngine = PredictEngine.Value;
			return predEngine.Predict(input);
		}
	}
}
